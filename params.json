{"name":"RasPiBrew","tagline":"Raspberry Pi Temperature Controller for homebrewing and sous vide cooking","body":"# RasPiBrew Vessel Temperature Controller\r\n\r\n![RasPiBrew using Bootstrap](https://github.com/steve71/RasPiBrew/raw/images/raspibrew_bootstrap.png)\r\n\r\nThis system is an inexpensive and flexible wireless web based controller for brewing, Sous Vide and similar applications.  With homebrewing it was originally targeted for electric brew in a bag (eBIAB), batch sparging in a cooler and extract methods but has recently been expanded on the desktop to multi-vessel and pump/stirrer control.  So, if you already have a propane system and looking to go electric or starting from scratch and looking for a way to control your setup this is an alternative. The most recent updates for this application are found on the RasPiBrew project page on Github.\r\n\r\nUsing the Android Smart Phone App or a Firefox web browser the temperature of a vessel can be controlled with a Raspberry Pi .  All status information including heat output percentage and current temperature are constantly sent back to the controller.  A very simple and inexpensive electronics hardware setup plus ease of use are the main goals of this project.  No custom made boards that are specific for this project are needed.  Also, using a web interface the level of customization is endless.\r\n\r\nDownload Software for Raspberry Pi Web Server.  Also, Control and Monitor your vessel temperature and heat output with an Android app.  Compatible with smartphones only.\r\n\r\nNew Version 1.1.1 of Android App:\r\n[RasPiBrew Android](https://play.google.com/store/apps/details?id=com.raspibrew) on Google Play\r\n\r\n![](https://github.com/steve71/RasPiBrew/raw/images/android/android_boil.png)![](https://github.com/steve71/RasPiBrew/raw/images/android/android_set.png)![](https://github.com/steve71/RasPiBrew/raw/images/android/android_chart.png)![](https://github.com/steve71/RasPiBrew/raw/images/android/android_pref1.png)![](https://github.com/steve71/RasPiBrew/raw/images/android/android_pref2.png)![](https://github.com/steve71/RasPiBrew/raw/images/android/android_temp_alert.png)\r\n\r\n\r\n# Hardware and Software Setup Instructions\r\n\r\n\r\n## Hardware\r\n\r\n\r\nParts List:\r\n* $35 Raspberry Pi Model B\r\n* Adafruit Pi Plate or PiCrust breakout board\r\n* Jeelabs Thermo Plug circuit board without components (for 1wire and GPIO)\r\n* Jeelabs Thermo Plug components from Radio Shack: 4.7k resistor, 1k resistor, 1N4001 diode, 2N4401 transistor\r\n* headers and wire jumpers\r\n* 1-wire DS18B20 digital thermometer\r\n* USB wifi adapter (Edimax EW-7811UN) and router\r\n* Optional:  20×4 LCD and LCD117 kit.  It is supported in the software\r\n* Optional: A Jeelabs Output Plug can also be used to drive more relays but requires software modification.\r\n\r\nThe Jeelabs circuit board is connected to a temperature sensor and a solid state relay to control a heating element.   The setup is shown in the following schematic:\r\n\r\n     ---------      ------- \r\n    | 1-Wire  |    | Relay |\r\n    | Sensor  |    |       | \r\n    | + - GND |    |  + -  |\r\n     ---------      -------\r\n      | |  |          | |           (Optional SSR Connections)\r\n      ---------------------          -----------   ---------\r\n     | Jeelabs Thermo Plug |        |  Relay 2 |  | Relay 3 | ...\r\n     | PWR +3V GND AIO DIO |        |  +  -    |  |  +  -   |\r\n      ---------------------          ----------    ---------     \r\n        |   |   |   |   |             5V  |         5V  | \r\n      ------------------------            |             |\r\n     | 5V  5V  GND  P4 P17    |     ---------------------------\r\n     |                     5V |---| VCC   P0            P1 ... |\r\n     |  Raspberry Pi/      GND|---| GND   Optional             |\r\n     |  Adafruit Plate kit SDA|---| DIO   Jeelabs Output Plug  | \r\n     |                     SCL|---| AI0                        |\r\n     |      5V GND TX         |    ----------------------------\r\n      ------------------------\r\n             |  |   |\r\n          --------------   \r\n         | 20x4 LCD and |\r\n         | LCD117 kit   |\r\n          --------------\r\n\r\nOnly the printed circuit board of the Jeelabs Thermo Plug is needed and solder:\r\n\r\n* 4.7k resistor\r\n* 1k resistor\r\n* 1N4001 Diode\r\n* 2N4401 Transister\r\n\r\nNext, solder headers and connect everything together using wire jumpers according to the above schematic.\r\n\r\nNote: The DS18B20 temp sensor can be connected to 3.3V or 5V on the Raspberry Pi. \r\n[DS18B20 DataSheet](http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf)\r\n\r\n## Software\r\n\r\nLoad Operating System onto SDCard\r\n\r\nDownload the raspberry pi operating system: [Raspberry Pi Downloads](http://www.raspberrypi.org/downloads) Use [Win32DiskImager](http://www.softpedia.com/get/CD-DVD-Tools/Data-CD-DVD-Burning/Win32-Disk-Imager.shtml) to install onto SDCARD. \r\n\r\nIn terminal type:\r\n    'sudo apt-get update'    \r\n    'sudo apt-get upgrade'\r\n\r\n### Beginner’s Guide\r\n\r\nFollow the [RasPi beginners guide](http://elinux.org/RPi_Beginners) to get up and running:\r\n\r\nRun `sudo setupcon` once manually after the keyboard is setup otherwise you may have long boot times.\r\n\r\n### Wireless Setup\r\n\r\nLookup [Compatible USB wifi devices](http://elinux.org/RPi_VerifiedPeripherals#USB_WiFi_Adapters) and install the drivers:\r\n\r\nTo set up a static ip address use the following in /etc/network/interfaces:\r\n\r\n    auto lo\r\n\r\n    iface lo inet loopback\r\n    iface eth0 inet static\r\n\r\n    auto wlan0\r\n    iface wlan0 inet static\r\n    address 192.168.1.103\r\n    netmask 255.255.255.0\r\n    gateway 192.168.1.1\r\n\r\nIf no wireless password use:\r\n\r\n    wireless-essid linksys\r\n\r\nOtherwise use the following:\r\n\r\n    wpa-ssid \"ssid\"\r\n    wpa-psk \"wireless_key_passphrase\" \r\n\r\nwith the correct `ssid` (router name) and `wireless_key_passphrase`.\r\n\r\n[Tutorial on setting up a static IP address](http://www.penguintutor.com/blog/viewblog.php?blog=6306)\r\n[Tutorial on setting up wifi device on linux](https://help.ubuntu.com/community/WifiDocs/WiFiHowTo)\r\n\r\n### Manual Installation\r\n\r\nPython Modules:\r\nInstall pip (package installer):\r\n     'sudo apt-get install python-setuptools'\r\n     'sudo easy_install pip'\r\n\r\nInstall PySerial:\r\n     sudo pip install pyserial\r\n     [PySerial Info](http://pyserial.sourceforge.net/pyserial.html)\r\n\r\nInstall Python i2c and smbus:\r\n     'sudo apt-get install python-smbus'\r\n     [smbus info](http://www.acmesystems.it/i2c)\r\n\r\nInstall Flask:\r\n     'sudo apt-get install python-dev'\r\n     'sudo apt-get install libpcre3-dev'\r\n     'sudo pip install Flask'\r\n     [Flask Info](http://flask.pocoo.org/)\r\n\r\nIn Raspberry Pi terminal window:\r\n    'sudo bash'\r\n    'cd /var'\r\n    'mkdir www'\r\n\r\nCopy software to `/var/www` preserving the directory structure.\r\n\r\nUpdate: Replace the temp sensor id in config.xml with the id of your DS18B20 temperature sensor found in the `/sys/bus/w1/devices/w1_bus_master1/` directory on the Raspberry Pi. (Previously the temp sensor id was in `raspibrew.py`)\r\n\r\nStart Putty on Windows and type login name and password.\r\nProgram must be run as superuser: Type `sudo bash`\r\nStart program by typing: `python raspibrew`\r\nNext, start the web browser on a computer on your network. If ip address of the Raspberry Pi is `192.168.1.3` then point the browser to `http://192.168.1.3:5000` \r\n\r\n## How to Start RasPiBrew on Boot up:\r\n\r\nCreate a new file: `/etc/init.d/raspibrew` as superuser and insert the following script:\r\n\r\n    #! /bin/sh\r\n    # /etc/init.d/raspibrew\r\n\r\n    ### BEGIN INIT INFO\r\n    # Provides:          raspibrew\r\n    # Required-Start:    $remote_fs $syslog\r\n    # Required-Stop:     $remote_fs $syslog\r\n    # Default-Start:     2 3 4 5\r\n    # Default-Stop:      0 1 6\r\n    # Short-Description: Simple script to start a program at boot\r\n    # Description:       A simple script from www.stuffaboutcode.com which will start / st$\r\n    ### END INIT INFO\r\n\r\n    # If you want a command to always run, put it here\r\n\r\n    # Carry out specific functions when asked to by the system\r\n    case \"$1\" in\r\n        start)\r\n            echo \"Starting RasPiBrew\"\r\n            # run application you want to start\r\n            python /var/www/raspibrew.py\r\n        ;;\r\n        stop)\r\n            echo \"Stopping RasPiBrew\"\r\n            # kill application you want to stop\r\n            killall python\r\n            python /var/www/cleanupGPIO.py\r\n        ;;\r\n    *)\r\n        echo \"Usage: /etc/init.d/raspibrew {start|stop}\"\r\n        exit 1\r\n        ;;\r\n    esac\r\n\r\n    exit 0\r\n\r\nMake script executable:\r\n    `sudo chmod 755 /etc/init.d/raspibrew`\r\n\r\nRegister script to be run at start-up:\r\n    `sudo update-rc.d raspibrew defaults`\r\n\r\nTo Remove script from start-up:\r\n    `sudo update-rc.d -f raspibrew remove`\r\n\r\nTo test starting the program:\r\n    `sudo /etc/init.d/raspibrew start`\r\n\r\nTo test stopping the program:\r\n    `sudo /etc/init.d/raspibrew stop`\r\n\r\n[Run RasPi Program at Start Up Info](http://www.stuffaboutcode.com/2012/06/raspberry-pi-run-program-at-start-up.html)\r\n\r\n### IDE for Development:\r\nCreate root password on Raspberry Pi:\r\n    `sudo passwd root`\r\nEnter new UNIX password: `raspberry`\r\n\r\nInstall [Aptana Studio 3](http://www.aptana.com/products/studio3) for IDE on your computer:\r\n\r\nThis is used for programming in Python, Javascript, web page design and 1-click synchronization with Raspberry Pi\r\n\r\nAfter creating a project and adding all source files, right click on project name.\r\nSelect `Publish` and then `Run Web Development Wizard...`\r\nSelect `FTP/SFTP/FTPS` and fill out the form as shown:\r\n![](https://github.com/steve71/RasPiBrew/raw/images/aptana_sftp_connection-264x300.png)\r\nEverytime files are saved on your computer they are automatically sent over to the Raspberry Pi.\r\n\r\n# Technical Details\r\n\r\nThe language for the server side software is Python for rapid development. The web server/framework is web.py. Multiple processes connected with pipes to communicate between them are used. For instance, one process can only get the temperature while another turns a heating element on and off. A third parent temp control process can control the heating process with information from the temp process and relay the information back to the web server.\r\n\r\nOn the client side jQuery and various plugins can be used to display data such as line charts and gauges. Mouse overs on the temperature plot will show the time and temp for the individual points. It is currently working in a Firefox Browser.\r\n\r\njQuery and two jQuery plugins (jsGauge and Flot) are used in the client:\r\nhttp://jquery.com\r\nhttp://code.google.com/p/jsgauge/\r\nhttp://code.google.com/p/flot/\r\n\r\nThe PID algorithm was translated from C code to Python. The C code was from “PID Controller Calculus with full C source source code” by Emile van de Logt An explanation on how to tune it is from the following web site:\r\nhttp://www.vandelogt.nl/htm/regelen_pid_uk.htm\r\n\r\nThe PID can be tuned very simply via the Ziegler-Nichols open loop method. Just follow the directions in the controller interface screen, highlight the sloped line in the temperature plot and the parameters are automatically calculated. After tuning with the Ziegler-Nichols method the parameters still needed adjustment because there was an overshoot of about 2 degrees in my system. I did not want the temperature to go past the setpoint since it takes a long time to come back down. Therefore, the parameters were adjusted to eliminate the overshoot. For this particular system the Ti term was more than doubled and the Td parameter was set to about a quarter of the open loop calculated value. Also a simple moving average was used on the temperature data that was fed to the PID controller to help improve performance. Tuning the parameters via the Integral of Time weighted Absolute Error (ITAE-Load) would provide the best results as described on van de Logt’s website above.\r\n\r\n#Brewing Equipment\r\n\r\n## Brewing Hardware Links\r\n\r\nThe electric brewery web site has great information on brewing hardware setup: http://www.theelectricbrewery.com/\r\nThe following sites are good sources for parts: bargainfittings.com, brewhardware.com and brewershardware.com.\r\n\r\n## My Setup\r\n\r\nFirst, a GFCI protected outlet is needed as well as the correct wiring gauge for the amperage used. An electrician should inspect the wiring. The following schematic (from PJ on homebrewtalk.com) is what I followed for my system which uses a 15.5 gallon vessel. I replaced the Auberin PID with the RasPiBrew setup and the pump is not used. Instead, an ice cream maker motor attached to a stainless steel dry wall mixer is used to constantly stir the water or wort in the brew kettle. Otherwise, a temperature differential will occur above and below heating element. The pump or stirrer can be added to RasPibrew control with some software modifications and using the optional jeelabs output plug which can control up to 8 relays. Since I just turn it on and let it run, I didn’t think it was needed. I use both the Brew in a Bag (BIAB) and batch sparging in a cooler brewing methods.\r\n\r\n![](https://github.com/steve71/RasPiBrew/raw/images/equipment/Auberin-wiring1-a4-5500w-BIAB-30d6.jpg)\r\n![](https://github.com/steve71/RasPiBrew/raw/images/equipment/toolbox_front-300x225.jpg)![](https://github.com/steve71/RasPiBrew/raw/images/equipment/toolbox_side.jpg)![](https://github.com/steve71/RasPiBrew/raw/images/equipment/toolbox_inside.jpg)\r\n![](https://github.com/steve71/RasPiBrew/raw/images/equipment/brew_vessel.jpg)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}